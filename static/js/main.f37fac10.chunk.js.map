{"version":3,"sources":["resources/logo.svg","resources/fired.svg","resources/target.svg","Minesweeper.js","App.js","reportWebVitals.js","index.js"],"names":["Minesweeper","props","context","getRandomField","rows","columns","mines","rowsArr","Array","map","opened","flagged","mined","traversed","minesAround","minesPut","row","Math","floor","random","column","length","handleCellClick","clickType","field","JSON","parse","stringify","state","situation","cell","gameWon","gameLost","gameStarted","console","log","handleResetClick","gameOver","expandAround","r","c","getRemainedFlags","isGameWon","setState","flags","className","ControlPanel","remainedFlags","this","onResetClick","Field","onClick","React","Component","LogoPanel","StatusPanel","src","logo","alt","FlagsCounter","Reset","Timer","updateTimeElapsed","secondsElapsed","Date","now","startDate","slice","minutesElapsed","prevProps","prevState","snapshot","timerId","setInterval","clearInterval","rowArr","rowNum","Row","element","index","Cell","cellStatus","unopened","id","openedClear","flagImage","target","mineImage","fired","onContextMenu","e","preventDefault","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.f37fac10.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.ee174d68.svg\";","export default __webpack_public_path__ + \"static/media/fired.5bcdc33c.svg\";","export default __webpack_public_path__ + \"static/media/target.c1f0e39e.svg\";","//todo: Use react hooks\n\nimport React from \"react\";\nimport \"./App.css\";\nimport logo from \"./resources/logo.svg\";\nimport fired from \"./resources/fired.svg\";\nimport target from \"./resources/target.svg\";\n\n//todo: Think about where to put the game attributes\nexport default class Minesweeper extends React.Component {\n    #rows = 9;\n    #columns = 8;\n    #mines = 10;\n\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            field: this.getRandomField(this.#rows, this.#columns, this.#mines),\n            situation: {\n                gameStarted: false,\n                gameLost: false,\n                gameWon: false,\n            },\n        }\n    }\n\n    render() {\n        return <div className={\"body\"}>\n            <div className={\"main-block\"}>\n                <ControlPanel\n                    remainedFlags={this.getRemainedFlags()}\n                    situation={this.state.situation}\n                    onResetClick={() => this.handleResetClick(this.#rows, this.#columns, this.#mines)}\n                />\n                <Field\n                    rowsArr={this.state.field}\n                    onClick={(clickType, row, column) => this.handleCellClick(clickType, row, column)}\n                />\n            </div>\n        </div>;\n    }\n\n    //todo: Optimize it\n    //todo: Refactor it\n    getRandomField = (rows, columns, mines) => {\n        const rowsArr = [...Array(rows)]\n            .map(() => [...Array(columns)]\n                .map(() => ({\n                    opened: false,\n                    flagged: false,\n                    mined: false,\n                    traversed: false,   //todo: WARNING! Watch out potential bugs\n                    minesAround: 0,\n                })));\n        let minesPut = 0;\n        while (minesPut < mines) {\n            const row = Math.floor(Math.random() * (rows));\n            const column = Math.floor(Math.random() * (columns));\n            if (!rowsArr[row][column].mined) {\n                rowsArr[row][column].mined = true;\n                if (row > 0 && column > 0) rowsArr[row - 1][column - 1].minesAround++;\n                if (row > 0) rowsArr[row - 1][column].minesAround++;\n                if (row > 0 && column < rowsArr[0].length - 1) rowsArr[row - 1][column + 1].minesAround++;\n                if (column > 0) rowsArr[row][column - 1].minesAround++;\n                if (column < rowsArr[0].length - 1) rowsArr[row][column + 1].minesAround++;\n                if (row < rowsArr.length - 1 && column > 0) rowsArr[row + 1][column - 1].minesAround++;\n                if (row < rowsArr.length - 1) rowsArr[row + 1][column].minesAround++;\n                if (row < rowsArr.length - 1 && column < rowsArr[0].length - 1) rowsArr[row + 1][column + 1].minesAround++;\n                minesPut++;\n            }\n        }\n        return rowsArr;\n    };\n\n    //todo: Make the game more usable by modifying conditions\n    //todo: Refactor it\n    handleCellClick = (clickType, row, column) => {\n        // const field = this.state.field.slice(); //todo: WARNING! It's still a shallow copy\n        const field = JSON.parse(JSON.stringify(this.state.field)); //todo: Test it\n        const situation = {...this.state.situation};\n        const cell = field[row][column];\n        if (situation.gameWon || situation.gameLost || cell.opened) return;\n        if (!situation.gameStarted) {\n            if (clickType === \"left\" && cell.mined) {\n                console.log(this.#rows, this.#columns, this.#mines);\n                // return;\n                return this.handleResetClick(this.#rows, this.#columns, this.#mines);\n                // return this.handleCellClick(clickType, row, column);\n            }\n            situation.gameStarted = true;\n        }\n        if (clickType === \"left\") {\n            cell.opened = true;\n            cell.flagged = false;\n            if (cell.mined) gameOver();\n            else expandAround(row, column);\n        } else if (clickType === \"right\" && this.getRemainedFlags() > 0) cell.flagged = true;\n        if (isGameWon()) situation.gameWon = true; //todo: You can make it more concise\n\n        this.setState({\n            field,\n            situation: situation,\n        });\n\n        function gameOver() {\n            situation.gameLost = true;\n            for (const row of field) {\n                for (const cell of row) {\n                    if (cell.mined) {\n                        cell.flagged = false;\n                        cell.opened = true;\n                    }\n                }\n            }\n        }\n\n        function expandAround(r, c) {\n            if (field[r][c].traversed) return;\n\n            field[r][c].traversed = true;\n            field[r][c].opened = true;\n\n            if (field[r][c].minesAround === 0) {\n                if (r > 0 && c > 0) expandAround(r - 1, c - 1);\n                if (r > 0) expandAround(r - 1, c);\n                if (r > 0 && c < field[0].length - 1) expandAround(r - 1, c + 1);\n                if (c > 0) expandAround(r, c - 1);\n                if (c < field[0].length - 1) expandAround(r, c + 1);\n                if (r < field.length - 1 && c > 0) expandAround(r + 1, c - 1);\n                if (r < field.length - 1) expandAround(r + 1, c);\n                if (r < field.length - 1 && c < field[0].length - 1) expandAround(r + 1, c + 1);\n            }\n        }\n\n        function isGameWon() {\n            for (const row of field) {\n                for (const cell of row) {\n                    if (!cell.opened && !cell.flagged) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        }\n    }\n\n    handleResetClick = (rows, columns, mines) => {\n        this.setState({\n            field: this.getRandomField(rows, columns, mines),\n            situation: {\n                gameStarted: false,\n                gameLost: false,\n                gameWon: false,\n            },\n        });\n    }\n\n    getRemainedFlags = () => {\n        let flags = 0;\n        for (const row of this.state.field) {\n            for (const element of row) {\n                if (element.flagged) {\n                    flags++;\n                }\n            }\n        }\n        //todo: The following line of code is hard-coded\n        return flags <= 10 ? 10 - flags : 0;\n    };\n}\n\nfunction ControlPanel(props) {\n    return <div className={\"control-panel\"}>\n        <LogoPanel/>\n        <StatusPanel\n            remainedFlags={props.remainedFlags}\n            situation={props.situation}\n            onResetClick={props.onResetClick}\n        />\n    </div>;\n}\n\nfunction LogoPanel() {\n    return <div className={\"logo-panel\"}>\n        <p className={\"app-name\"}>Minesweeper</p>\n        <img src={logo} className=\"app-logo\" alt=\"logo\"/>\n    </div>;\n}\n\nfunction StatusPanel(props) {\n    return <div className={\"status-panel\"}>\n        <FlagsCounter\n            remainedFlags={props.remainedFlags}\n        />\n        <Reset\n            situation={props.situation}\n            onResetClick={props.onResetClick}\n        />\n        <Timer\n            situation={props.situation}\n        />\n    </div>;\n}\n\n//todo: Consider merging this method with timer\nfunction FlagsCounter(props) {\n    return <p className={\"flags-counter\"}>\n        {props.remainedFlags}\n    </p>;\n}\n\nfunction Reset(props) {\n    //todo: Replace with emojis\n    //todo: Add emoji to guidance comments below\n    // const gameNotStarted = \"&#128566;\", gameStarted = \"&#128526;\", gameLost = \"&#128577;\", gameWon = \"&#128525;\";\n    const gameNotStarted = \"Reset\", gameStarted = \":)\", gameLost = \":/\", gameWon = \":))\";\n\n    let situation;\n    if (!props.situation.gameStarted) situation = gameNotStarted;\n    else if (props.situation.gameLost) situation = gameLost;\n    else if (props.situation.gameWon) situation = gameWon;\n    else if (props.situation.gameStarted) situation = gameStarted;\n\n    return <button\n        className={\"reset\"}\n        onClick={props.onResetClick}\n    >\n        {situation}\n    </button>\n}\n\nclass Timer extends React.Component {\n    constructor(props, context) {\n        super(props, context);\n        this.state = {\n            startDate: null,\n            secondsElapsed: \"00\",\n            minutesElapsed: 0,\n        }\n    }\n\n    componentDidUpdate(prevProps, prevState, snapshot) {\n        //todo: Figure out why the following line of code is problematic\n        // super.componentDidUpdate(prevProps, prevState);\n        if (this.props.situation.gameStarted && !prevProps.situation.gameStarted) {\n            this.setState(({\n                startDate: Date.now(),\n            }));\n            this.timerId = setInterval(this.updateTimeElapsed, 1000);\n        } else if (this.props.situation.gameWon || this.props.situation.gameLost) {\n            clearInterval(this.timerId);\n        } else if (\n            !this.props.situation.gameStarted &&\n            (prevProps.situation.gameStarted || prevProps.situation.gameWon || prevProps.situation.gameLost)) {\n\n            clearInterval(this.timerId);\n            this.setState({\n                secondsElapsed: \"00\",\n                minutesElapsed: 0,\n            })\n        }\n    }\n\n    render() {\n        return <p className={\"timer\"}>\n            {this.state.minutesElapsed}:{this.state.secondsElapsed}\n        </p>;\n    }\n\n    updateTimeElapsed = () => {\n        this.setState((state) => ({\n            secondsElapsed: (\"0\" + Math.floor((Date.now() - state.startDate) / 1000 % 60)).slice(-2),\n            minutesElapsed: Math.floor((Date.now() - state.startDate) / 1000 / 60),\n        }));\n    };\n}\n\nfunction Field(props) {\n    return <div className={\"field\"}>\n        {props.rowsArr.map((rowArr, rowNum) =>\n            <Row\n                key={rowNum}\n                rowNum={rowNum}\n                rowArr={rowArr}\n                onClick={(clickType, column) => props.onClick(clickType, rowNum, column)}\n            />)}\n    </div>;\n}\n\n//todo: Consider removing Row and merge with Field\nfunction Row(props) {\n    return <div className={\"row\"}>\n        {props.rowArr.map((element, index) =>\n            <Cell\n                key={`r${props.rowNum}_c${index}`}\n                cell={element}\n                onClick={(clickType) => props.onClick(clickType, index)}\n            />)}\n    </div>;\n}\n\n//todo: Consider handling the clicks on disabled cells right here\nfunction Cell(props) {\n    const unopened = <span className={\"cell\"} id={\"unopened\"}/>;\n    const openedClear = <div\n        className={\"cell\"}\n        id={\"opened-clear\"}\n    >\n        {props.cell.minesAround > 0 && props.cell.minesAround}\n    </div>;\n    const flagImage = <img className={\"cell\"} id={\"flag\"} alt={\"flag\"} src={target}/>;\n    const mineImage = <img className={\"cell\"} id={\"mine\"} alt={\"mine\"} src={fired}/>;\n\n    let cellStatus;\n    if (props.cell.opened) {\n        if (props.cell.mined) {\n            cellStatus = mineImage;\n        } else {\n            cellStatus = openedClear;\n        }\n    } else if (props.cell.flagged) {\n        cellStatus = flagImage;\n    } else {\n        cellStatus = unopened;\n    }\n\n    //todo: Use className and Id properly to pass the test\n    return <button\n        className={\"cell-container\"}\n        onClick={() => props.onClick(\"left\")}\n        onContextMenu={(e) => {\n            e.preventDefault();\n            return props.onClick(\"right\");\n        }}\n    >\n        {cellStatus}\n    </button>;\n}","import React from \"react\";\nimport \"./App.css\";\nimport Minesweeper from \"./Minesweeper\"\n\nexport default App;\n\nfunction App() {\n    return <Minesweeper/>;\n}\n\n// import logo from './logo.svg';\n// import './App.css';\n//\n// function App() {\n//   return (\n//     <div className=\"App\">\n//       <header className=\"App-header\">\n//         <img src={logo} className=\"App-logo\" alt=\"logo\" />\n//         <p>\n//           Edit <code>src/App.js</code> and save to reload.\n//         </p>\n//         <a\n//           className=\"App-link\"\n//           href=\"https://reactjs.org\"\n//           target=\"_blank\"\n//           rel=\"noopener noreferrer\"\n//         >\n//           Learn React\n//         </a>\n//       </header>\n//     </div>\n//   );\n// }\n//\n// export default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n    <React.StrictMode>\n        <App />\n    </React.StrictMode>,\n    document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}